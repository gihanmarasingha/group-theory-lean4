msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Sun May 19 10:30:27 2024\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! üéâ"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings‚Ä¶ üé≠"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! üéâ"
msgstr ""

#: Game.Levels.GroupWorld.L01_mul_one
msgid "Multiplicative identity"
msgstr ""

#: Game.Levels.GroupWorld.L01_mul_one
msgid "A group $G$ is a set together with an operation $*$ and a distinguished element $1$, not\n"
"necessarily the same as the natural number $1$, that satisfies certain properties. We'll introduce\n"
"these properties in the next few levels. The first property, called `mul_one` asserts that\n"
"$a * 1 = a$.\n"
"\n"
"To complete this level, just enter `rw [mul_one]` in the box in the middle pane."
msgstr ""

#: Game.Levels.GroupWorld.L01_mul_one
msgid "`rw` is used to rewrite the target or a hypothesis\n"
"\n"
"If `h` is the name of a theorem `rw [h]` rewrites the target using `h`. For example, if `h` is\n"
"the theroem `a = b`, then `rw [h]` causes every instance of `a` in the target to be replaced with\n"
"`b`."
msgstr ""

#: Game.Levels.GroupWorld.L01_mul_one
msgid "`mul_one` is a proof that `a * 1 = a`"
msgstr ""

#: Game.Levels.GroupWorld.L01_mul_one
msgid "Let $a$ be an element of $G$. Show that $a * 1 = a$."
msgstr ""

#: Game.Levels.GroupWorld.L01_mul_one
msgid "Enter `rw [mul_one]` in the text box and press \"Execute\"."
msgstr ""

#: Game.Levels.GroupWorld.L01_mul_one
msgid "Great, you've just used the right identity property of groups. We'll learn the left identity property\n"
"in the next level."
msgstr ""

#: Game.Levels.GroupWorld.L02_one_mul
msgid "Multiplicative identity on the left"
msgstr ""

#: Game.Levels.GroupWorld.L02_one_mul
msgid "In the previous level, we saw that $a * 1 = a$ for every $a$ in a group $G$. In this level, we\n"
"introduce the property that $1 * a = a$, for every $a$ in $G$."
msgstr ""

#: Game.Levels.GroupWorld.L02_one_mul
msgid "`one_mul` is a proof that `1 * a = a`"
msgstr ""

#: Game.Levels.GroupWorld.L02_one_mul
msgid "Let $a$ be an element of $G$. Show that $1 * (a * 1) = a$."
msgstr ""

#: Game.Levels.GroupWorld.L02_one_mul
msgid "Enter `rw [mul_one]` or `rw [one_mul]` in the text box and press \"Execute\"."
msgstr ""

#: Game.Levels.GroupWorld.L02_one_mul
msgid "Enter `rw [one_mul]` in the text box and press \"Execute\"."
msgstr ""

#: Game.Levels.GroupWorld.L02_one_mul
msgid "Enter `rw [mul_one]` in the text box and press \"Execute\"."
msgstr ""

#: Game.Levels.GroupWorld.L02_one_mul
msgid "I asked you to perform rewrites on two separate lines. But these rewrites can be combined on one\n"
"line as `rw [mul_one, one_mul]`.\n"
"\n"
"In the next level, we'll learn another property of groups."
msgstr ""

#: Game.Levels.GroupWorld.L03_mul_assoc
msgid "Multiplicative associativity"
msgstr ""

#: Game.Levels.GroupWorld.L03_mul_assoc
msgid "Brackets can be shifted in a group. This property is called associativity. In Lean, `mul_assoc`\n"
"is the theorem that $(a*b)*c = a*(b*c)$."
msgstr ""

#: Game.Levels.GroupWorld.L03_mul_assoc
msgid "`mul_assoc` is a proof that `(a * b) * c = a * (b * c)`\n"
"\n"
"Note that Lean will write `(a * b) * c` as `a * b * c` to minimise the use of brackets."
msgstr ""

#: Game.Levels.GroupWorld.L03_mul_assoc
msgid "Let $a, b, c$ be elements of $G$. Show that $(a * b) * (b * c) = (a * (b * b)) * c$."
msgstr ""

#: Game.Levels.GroupWorld.L03_mul_assoc
msgid "You'll need several rewrites, which can be done all on one line."
msgstr ""

#: Game.Levels.GroupWorld.L03_mul_assoc
msgid "Almost there. Just one more property!"
msgstr ""

#: Game.Levels.GroupWorld.L04_mul_left_inv
msgid "Left inverse"
msgstr ""

#: Game.Levels.GroupWorld.L04_mul_left_inv
msgid "The left inverse `a‚Åª¬π` of an element `a` satisfies the property that `a‚Åª¬π * a = 1`. This property\n"
"is `mul_left_inv`, the left multiplicative inverse.\n"
"\n"
"*Note* to enter `‚Åª¬π` in Lean, type `\\-1`."
msgstr ""

#: Game.Levels.GroupWorld.L04_mul_left_inv
msgid "`mul_left_inv` is a proof that `a‚Åª¬π * a = 1`"
msgstr ""

#: Game.Levels.GroupWorld.L04_mul_left_inv
msgid "Let $a, b, c$ be elements of $G$. Show that $(a * b) * (b‚Åª¬π * a‚Åª¬π) = 1$."
msgstr ""

#: Game.Levels.GroupWorld.L04_mul_left_inv
msgid "Try rewriting with `mul_left_inv`"
msgstr ""

#: Game.Levels.GroupWorld.L04_mul_left_inv
msgid "Remember when Lean writes `x * y * z`, it means `(x * y) * z`. Now use an\n"
"appropriate multiplicative identity rule"
msgstr ""

#: Game.Levels.GroupWorld.L04_mul_left_inv
msgid "Almost there. Just one more property!"
msgstr ""

#: Game.Levels.GroupWorld
msgid "Group Theory World"
msgstr ""

#: Game.Levels.GroupWorld
msgid "This game contains only one world, the Group Theory World. You'll use calculation-style\n"
"proofs to build simple results in group theory.\n"
"\n"
"Click on \"Start\" below to begin."
msgstr ""

#: Game
msgid "LMS Education Day Lean Game Example"
msgstr ""

#: Game
msgid "# Welcome to this Lean example\n"
"\n"
"## Group theory\n"
"\n"
"This simple Lean game example contains one 'world', exploring ideas in group theory.\n"
"\n"
"Please click the blue circle on the right of this pane to start."
msgstr ""

#: Game
msgid "Developed by Gihan Marasingha using the Lean 4 game engine at HHU."
msgstr ""
